"""Initial schema

Revision ID: 575d1a697e08
Revises: 
Create Date: 2025-07-14 16:00:21.526856

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "575d1a697e08"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "categories",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("slug", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("parent_id", sa.UUID(), nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_categories_slug"), "categories", ["slug"], unique=True)
    op.create_table(
        "organizations",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("url", sa.String(), nullable=True),
        sa.Column("logo_url", sa.String(), nullable=True),
        sa.Column(
            "urn",
            sa.String(),
            nullable=True,
            comment="CMP-specific organization identifier (URN format)",
        ),
        sa.Column(
            "social_links",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Array of social media URLs",
        ),
        sa.Column(
            "feed_url",
            sa.String(),
            nullable=True,
            comment="URL to the organization's product feed",
        ),
        sa.Column(
            "raw_data",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Full JSON-LD representation of the organization",
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("urn"),
    )
    op.create_index(
        op.f("ix_organizations_name"), "organizations", ["name"], unique=False
    )
    op.create_table(
        "brands",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("logo_url", sa.String(), nullable=True),
        sa.Column(
            "urn",
            sa.String(),
            nullable=True,
            comment="CMP-specific brand identifier (URN format)",
        ),
        sa.Column("organization_id", sa.UUID(), nullable=False),
        sa.Column(
            "raw_data",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Full JSON-LD representation of the brand",
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["organization_id"], ["organizations.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("urn"),
    )
    op.create_index(op.f("ix_brands_name"), "brands", ["name"], unique=False)
    op.create_table(
        "organization_category",
        sa.Column("organization_id", sa.UUID(), nullable=False),
        sa.Column("category_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["category_id"], ["categories.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["organization_id"], ["organizations.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("organization_id", "category_id"),
    )
    op.create_table(
        "brand_category",
        sa.Column("brand_id", sa.UUID(), nullable=False),
        sa.Column("category_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["brand_id"], ["brands.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["category_id"], ["categories.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("brand_id", "category_id"),
    )
    op.create_table(
        "product_groups",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "urn",
            sa.String(),
            nullable=False,
            comment="CMP-specific product group identifier (URN format)",
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("url", sa.String(), nullable=True),
        sa.Column("category", sa.String(), nullable=True),
        sa.Column(
            "product_group_id",
            sa.String(),
            nullable=False,
            comment="External identifier for the product group",
        ),
        sa.Column(
            "varies_by",
            sa.ARRAY(sa.String()),
            nullable=False,
            comment="Array of variant dimensions (e.g., color, size)",
        ),
        sa.Column("brand_id", sa.UUID(), nullable=False),
        sa.Column(
            "raw_data",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Full JSON-LD representation of the product group",
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(["brand_id"], ["brands.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("product_group_id"),
        sa.UniqueConstraint("urn"),
    )
    op.create_index(
        op.f("ix_product_groups_category"), "product_groups", ["category"], unique=False
    )
    op.create_index(
        op.f("ix_product_groups_name"), "product_groups", ["name"], unique=False
    )
    op.create_table(
        "product_group_category",
        sa.Column("product_group_id", sa.UUID(), nullable=False),
        sa.Column("category_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["category_id"], ["categories.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["product_group_id"], ["product_groups.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("product_group_id", "category_id"),
    )
    op.create_table(
        "products",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "urn",
            sa.String(),
            nullable=False,
            comment="CMP-specific product identifier (URN format)",
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("url", sa.String(), nullable=True),
        sa.Column("sku", sa.String(), nullable=True, comment="Stock keeping unit"),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("product_group_id", sa.UUID(), nullable=False),
        sa.Column("brand_id", sa.UUID(), nullable=False),
        sa.Column(
            "variant_attributes",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Attributes that differentiate this variant",
        ),
        sa.Column(
            "raw_data",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Full JSON-LD representation of the product",
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(["brand_id"], ["brands.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["product_group_id"], ["product_groups.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("urn"),
    )
    op.create_index(op.f("ix_products_name"), "products", ["name"], unique=False)
    op.create_index(op.f("ix_products_sku"), "products", ["sku"], unique=False)
    op.create_table(
        "offers",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("product_id", sa.UUID(), nullable=False),
        sa.Column(
            "seller_id",
            sa.UUID(),
            nullable=False,
            comment="Organization offering the product",
        ),
        sa.Column(
            "price", sa.Float(), nullable=False, comment="Current price of the product"
        ),
        sa.Column(
            "price_currency",
            sa.String(length=3),
            nullable=False,
            comment="Currency code (e.g., 'USD')",
        ),
        sa.Column(
            "price_valid_until",
            postgresql.TIMESTAMP(timezone=True),
            nullable=True,
            comment="Expiration date for the current price",
        ),
        sa.Column(
            "availability",
            sa.String(),
            nullable=False,
            comment="Availability status (e.g., 'InStock', 'OutOfStock')",
        ),
        sa.Column(
            "inventory_level",
            sa.Integer(),
            nullable=True,
            comment="Current inventory quantity",
        ),
        sa.Column(
            "shipping_cost", sa.Float(), nullable=True, comment="Cost of shipping"
        ),
        sa.Column(
            "shipping_currency",
            sa.String(length=3),
            nullable=True,
            comment="Currency code for shipping cost",
        ),
        sa.Column(
            "shipping_destination",
            sa.String(),
            nullable=True,
            comment="Destination region for shipping",
        ),
        sa.Column(
            "shipping_speed_tier",
            sa.String(),
            nullable=True,
            comment="Shipping speed tier (e.g., 'Standard', 'Express')",
        ),
        sa.Column(
            "est_delivery_min_days",
            sa.Integer(),
            nullable=True,
            comment="Minimum expected delivery time in days",
        ),
        sa.Column(
            "est_delivery_max_days",
            sa.Integer(),
            nullable=True,
            comment="Maximum expected delivery time in days",
        ),
        sa.Column(
            "warranty_months",
            sa.Integer(),
            nullable=True,
            comment="Duration of warranty in months",
        ),
        sa.Column(
            "warranty_type", sa.String(), nullable=True, comment="Type of warranty"
        ),
        sa.Column(
            "return_window_days",
            sa.Integer(),
            nullable=True,
            comment="Number of days allowed for returns",
        ),
        sa.Column(
            "restocking_fee_pct",
            sa.Float(),
            nullable=True,
            comment="Restocking fee as percentage",
        ),
        sa.Column(
            "gift_wrap",
            sa.Boolean(),
            nullable=True,
            comment="Whether gift wrapping is available",
        ),
        sa.Column(
            "raw_data",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Full JSON-LD representation of the offer",
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(["product_id"], ["products.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["seller_id"], ["organizations.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "product_category",
        sa.Column("product_id", sa.UUID(), nullable=False),
        sa.Column("category_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["category_id"], ["categories.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["product_id"], ["products.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("product_id", "category_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("product_category")
    op.drop_table("offers")
    op.drop_index(op.f("ix_products_sku"), table_name="products")
    op.drop_index(op.f("ix_products_name"), table_name="products")
    op.drop_table("products")
    op.drop_table("product_group_category")
    op.drop_index(op.f("ix_product_groups_name"), table_name="product_groups")
    op.drop_index(op.f("ix_product_groups_category"), table_name="product_groups")
    op.drop_table("product_groups")
    op.drop_table("brand_category")
    op.drop_table("organization_category")
    op.drop_index(op.f("ix_brands_name"), table_name="brands")
    op.drop_table("brands")
    op.drop_index(op.f("ix_organizations_name"), table_name="organizations")
    op.drop_table("organizations")
    op.drop_index(op.f("ix_categories_slug"), table_name="categories")
    op.drop_table("categories")
    # ### end Alembic commands ###
